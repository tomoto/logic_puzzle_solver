#pragma once

#include "nur/data/Board.h"

namespace nur {

  /// シマポテンシャルの埋め方の制約により確定するマスの処理
  ///
  /// TODO: シマ自体に管理させた方がよいルールもありそう
  ///
  /// Rule 1:
  /// 数字マスに近い方(ポテンシャルの高い方)から隙間なくマスを占めた場合に
  /// 到達する最も遠いポテンシャルを「フェルミ準位」とした場合、
  /// そのフェルミ準位以上の各ポテンシャルについて、1マス以上の領地が必ず確保される
  /// ⇒それらの各ポテンシャルの選択肢が唯一であればそれを領地として確定する
  ///
  /// Rule 2:
  /// フェルミ準位以上の各ポテンシャルについて、選択肢が2つの場合、
  /// それらのうち1つは必ず領地として確保される
  /// ⇒それらがポテンシャル0のマスを挟んで隣接している場合、挟まれたマスはカベに確定する
  ///
  /// 例: 2に隣接する(ポテンシャル1の)選択肢が北と東の2つの場合、北東がカベに確定する
  ///
  ///    .██<-ここがカベで確定
  /// ██ 2 .
  ///   ██
  ///
  /// Rule 3:
  /// 領地として確定した白マスについて、その隣接する4マスのうち、
  /// 0でないポテンシャルを持つマスが唯一であれば、それも領地として確定する
  struct ShimaPotentialReachabilityRule {
    bool apply(Board& b) const;

  private:
    int calcFermiPotential(const Shima& shima) const;
  };

} //
